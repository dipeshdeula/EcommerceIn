version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ecommerce_postgres
    restart: always
    environment:
      POSTGRES_DB: EcommerceInstant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dipesh
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ecommerce_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    expose:
      - "5672"
      - "15672"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    restart: always
    environment:
      # Database Connection
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=EcommerceInstant;Username=postgres;Password=dipesh;
      # RabbitMQ Settings
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__QueueName=ReserveStockQueue
      - RabbitMQ__Ssl=false
      # Application Settings
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - FileSettings__BaseUrl=http://110.34.2.30:5013
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./uploads:/app/uploads

  # Nginx Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    container_name: ecommerce_nginx
    restart: always
    ports:
      - "110.34.2.30:5013:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./uploads:/var/www/uploads
    depends_on:
      - backend
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data: